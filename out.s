
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
MAKE_LIT_VOID
MAKE_LIT_NIL
MAKE_LIT_BOOL(0)
MAKE_LIT_BOOL(1)
MAKE_LIT_STRING 8, 119, 104, 97, 116, 101, 118, 101, 114
MAKE_LIT_SYMBOL(const_tbl + 6)
MAKE_LIT_INT(0)
MAKE_LIT_INT(1)
MAKE_LIT_STRING 57, 116, 104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 110, 32, 101, 114, 114, 111, 114, 44, 32, 98, 117, 116, 32, 121, 111, 117, 32, 100, 111, 110, 39, 116, 32, 115, 117, 112, 112, 111, 114, 116, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 115
MAKE_LIT_CHAR(0)
MAKE_LIT_INT(2)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl + 0
%define SOB_NIL_ADDRESS const_tbl + 1
%define SOB_FALSE_ADDRESS const_tbl + 2
%define SOB_TRUE_ADDRESS const_tbl + 4

fvar_tbl:
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp

    call code_fragment
    add rsp, 4*8
    ret

code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_boolean)
    mov [fvar_tbl + 0], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_float)
    mov [fvar_tbl + 8], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_integer)
    mov [fvar_tbl + 16], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_pair)
    mov [fvar_tbl + 24], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_null)
    mov [fvar_tbl + 32], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_char)
    mov [fvar_tbl + 40], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_vector)
    mov [fvar_tbl + 48], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_string)
    mov [fvar_tbl + 56], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_procedure)
    mov [fvar_tbl + 64], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_symbol)
    mov [fvar_tbl + 72], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
    mov [fvar_tbl + 80], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
    mov [fvar_tbl + 88], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
    mov [fvar_tbl + 96], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
    mov [fvar_tbl + 104], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_length)
    mov [fvar_tbl + 112], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_ref)
    mov [fvar_tbl + 120], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_set)
    mov [fvar_tbl + 128], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_vector)
    mov [fvar_tbl + 136], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
    mov [fvar_tbl + 144], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
    mov [fvar_tbl + 152], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
    mov [fvar_tbl + 160], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_eq)
    mov [fvar_tbl + 168], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_add)
    mov [fvar_tbl + 176], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_mul)
    mov [fvar_tbl + 184], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_sub)
    mov [fvar_tbl + 192], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_div)
    mov [fvar_tbl + 200], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_lt)
    mov [fvar_tbl + 208], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_equ)
    mov [fvar_tbl + 216], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
    mov [fvar_tbl + 224], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
    mov [fvar_tbl + 232], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
    mov [fvar_tbl + 240], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
    mov [fvar_tbl + 248], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
    mov [fvar_tbl + 256], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
    mov [fvar_tbl + 264], rax

	;;; Code genrated by genrate from here ;;;
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_2
Lcode_2:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_1
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_1

Lelse_1:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [fvar_tbl + 272] ;;; fvar flat
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [fvar_tbl + 240] ;;; fvar cons
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_1:
	leave
	ret
Lcont_2:
	MAKE_CLOSURE(rax , rdx , Lcode_2)
	mov qword [fvar_tbl + 272], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 240] ;;; fvar cons
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_10
Lcode_10:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *4)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_9
Lcode_9:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic

	mov rax, const_tbl + 1	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_8
Lcode_8:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_7
Lcode_7:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_6
	mov rax, qword [rbp + 8*(4 +0)]	
jmp Lexit_6

Lelse_6:
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	MALLOC rax, (8 * 4)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	mov rcx, qword [rbx + (8 * 2)]
	mov qword [rax + (8 * 3)], rcx

	MALLOC rbx, (8 *2)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_5
Lcode_5:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 5)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	mov rcx, qword [rbx + (8 * 2)]
	mov qword [rax + (8 * 3)], rcx

	mov rcx, qword [rbx + (8 * 3)]
	mov qword [rax + (8 * 4)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_4
Lcode_4:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*4]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_3
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*4]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*4]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_3

Lelse_3:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*4]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*4]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*4]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_3:
	leave
	ret
Lcont_4:
	MAKE_CLOSURE(rax , rdx , Lcode_4)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]


	leave
	ret
Lcont_5:
	MAKE_CLOSURE(rax , rdx , Lcode_5)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_6:
	leave
	ret
Lcont_7:
	MAKE_CLOSURE(rax , rdx , Lcode_7)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]


	leave
	ret
Lcont_8:
	MAKE_CLOSURE(rax , rdx , Lcode_8)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_9:
	MAKE_CLOSURE(rax , rdx , Lcode_9)
	leave
	ret
Lcont_10:
	MAKE_CLOSURE(rax , rdx , Lcode_10)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 280], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_12
Lcode_12:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_11
Lcode_11:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_11:
	MAKE_CLOSURE(rax , rdx , Lcode_11)
	leave
	ret
Lcont_12:
	MAKE_CLOSURE(rax , rdx , Lcode_12)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 288], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_13
Lcode_13:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	mov rax, qword [rbp + 8*(4 +0)]
	leave
	ret
Lcont_13:
	MAKE_CLOSURE(rax , rdx , Lcode_13)
	mov qword [fvar_tbl + 296], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 24] ;;; fvar pair?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 3 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_17
Lcode_17:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *3)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_16
Lcode_16:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_15

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_14
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic

	mov rax, qword [fvar_tbl + 304] ;;; fvar list?
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_14

Lelse_14:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_14:

Lexit_15:
	leave
	ret
Lcont_16:
	MAKE_CLOSURE(rax , rdx , Lcode_16)
	leave
	ret
Lcont_17:
	MAKE_CLOSURE(rax , rdx , Lcode_17)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 304], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 176] ;;; fvar +
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 24] ;;; fvar pair?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_23
Lcode_23:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *4)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_22
Lcode_22:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_21
Lcode_21:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(1)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +1)], rax
	mov rax, SOB_VOID_ADDRESS

	mov rax, const_tbl + 32	;;;Const by genrate
	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *2)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_20
Lcode_20:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_19
	mov rax, qword [rbp + 8*(4 +1)]	
jmp Lexit_19

Lelse_19:
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_18
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_18

Lelse_18:
	mov rax, const_tbl + 50	;;;Const by genrate

Lexit_18:


Lexit_19:
	leave
	ret
Lcont_20:
	MAKE_CLOSURE(rax , rdx , Lcode_20)
	push rax
	mov rax, qword [rbp + 8*(4 +1)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*(4 +1)]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



	leave
	ret
Lcont_21:
	MAKE_CLOSURE(rax , rdx , Lcode_21)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_22:
	MAKE_CLOSURE(rax , rdx , Lcode_22)
	leave
	ret
Lcont_23:
	MAKE_CLOSURE(rax , rdx , Lcode_23)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 312], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 312] ;;; fvar length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 104] ;;; fvar make-string
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 5 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_27
Lcode_27:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *5)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_26
Lcode_26:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 1
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (1 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (1 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 1) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_25
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 116	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_25

Lelse_25:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_24
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_24

Lelse_24:
	mov rax, const_tbl + 50	;;;Const by genrate

Lexit_24:


Lexit_25:
	leave
	ret
Lcont_26:
	MAKE_CLOSURE(rax , rdx , Lcode_26)
	leave
	ret
Lcont_27:
	MAKE_CLOSURE(rax , rdx , Lcode_27)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 104], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 136] ;;; fvar make-vector
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 312] ;;; fvar length
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_31
Lcode_31:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *4)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_30
Lcode_30:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 1
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (1 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (1 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 1) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_29
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_29

Lelse_29:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_28
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_28

Lelse_28:
	mov rax, const_tbl + 50	;;;Const by genrate

Lexit_28:


Lexit_29:
	leave
	ret
Lcont_30:
	MAKE_CLOSURE(rax , rdx , Lcode_30)
	leave
	ret
Lcont_31:
	MAKE_CLOSURE(rax , rdx , Lcode_31)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 136], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 168] ;;; fvar eq?
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_34
Lcode_34:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_33
Lcode_33:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 4	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_32
	mov rax, const_tbl + 2	;;;Const by genrate	
jmp Lexit_32

Lelse_32:
	mov rax, const_tbl + 4	;;;Const by genrate

Lexit_32:
	leave
	ret
Lcont_33:
	MAKE_CLOSURE(rax , rdx , Lcode_33)
	leave
	ret
Lcont_34:
	MAKE_CLOSURE(rax , rdx , Lcode_34)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 320], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 16] ;;; fvar integer?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 8] ;;; fvar float?
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_37
Lcode_37:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *2)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_36
Lcode_36:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_35

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax


Lexit_35:
	leave
	ret
Lcont_36:
	MAKE_CLOSURE(rax , rdx , Lcode_36)
	leave
	ret
Lcont_37:
	MAKE_CLOSURE(rax , rdx , Lcode_37)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 328], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 264] ;;; fvar apply
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 240] ;;; fvar cons
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 5 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_48
Lcode_48:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *5)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_47
Lcode_47:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 2
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (2 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (2 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 2) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_46
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *3)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_41
Lcode_41:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_40
Lcode_40:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 4)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	mov rcx, qword [rbx + (8 * 2)]
	mov qword [rax + (8 * 3)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_39
Lcode_39:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_38
	mov rax, const_tbl + 1	;;;Const by genrate	
jmp Lexit_38

Lelse_38:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_38:
	leave
	ret
Lcont_39:
	MAKE_CLOSURE(rax , rdx , Lcode_39)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



	leave
	ret
Lcont_40:
	MAKE_CLOSURE(rax , rdx , Lcode_40)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_41:
	MAKE_CLOSURE(rax , rdx , Lcode_41)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_46

Lelse_46:
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *3)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_45
Lcode_45:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *2)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_44
Lcode_44:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 4)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	mov rcx, qword [rbx + (8 * 2)]
	mov qword [rax + (8 * 3)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_43
Lcode_43:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_42
	mov rax, const_tbl + 1	;;;Const by genrate	
jmp Lexit_42

Lelse_42:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*4]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 336] ;;; fvar map
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*3]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 336] ;;; fvar map
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 3 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*3]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_42:
	leave
	ret
Lcont_43:
	MAKE_CLOSURE(rax , rdx , Lcode_43)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



	leave
	ret
Lcont_44:
	MAKE_CLOSURE(rax , rdx , Lcode_44)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_45:
	MAKE_CLOSURE(rax , rdx , Lcode_45)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_46:
	leave
	ret
Lcont_47:
	MAKE_CLOSURE(rax , rdx , Lcode_47)
	leave
	ret
Lcont_48:
	MAKE_CLOSURE(rax , rdx , Lcode_48)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 336], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 176] ;;; fvar +
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 312] ;;; fvar length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 136] ;;; fvar make-vector
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 24] ;;; fvar pair?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 7 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_54
Lcode_54:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *7)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov rcx, qword [rbp + (8 * (4 + 5))]
	mov qword [rbx + 40], rcx

	mov rcx, qword [rbp + (8 * (4 + 6))]
	mov qword [rbx + 48], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_53
Lcode_53:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_52
Lcode_52:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_51
Lcode_51:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_50
	mov rax, qword [rbp + 8*(4 +1)]	
jmp Lexit_50

Lelse_50:
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_49
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic

	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*6]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 3 ;;; args count applic
	mov rax, qword [fvar_tbl + 128] ;;; fvar vector-set!
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 3 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 8
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_49

Lelse_49:
	mov rax, const_tbl + 50	;;;Const by genrate

Lexit_49:


Lexit_50:
	leave
	ret
Lcont_51:
	MAKE_CLOSURE(rax , rdx , Lcode_51)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*5]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 3 ;;; args count applic

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 8
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



	leave
	ret
Lcont_52:
	MAKE_CLOSURE(rax , rdx , Lcode_52)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_53:
	MAKE_CLOSURE(rax , rdx , Lcode_53)
	leave
	ret
Lcont_54:
	MAKE_CLOSURE(rax , rdx , Lcode_54)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 344], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 192] ;;; fvar -
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 112] ;;; fvar vector-length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 240] ;;; fvar cons
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 120] ;;; fvar vector-ref
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 208] ;;; fvar <
	push rax ;;; push arg applic
	push 5 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_59
Lcode_59:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *5)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_58
Lcode_58:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_57
Lcode_57:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_56
Lcode_56:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_55
	mov rax, qword [rbp + 8*(4 +1)]	
jmp Lexit_55

Lelse_55:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 3 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 8
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_55:
	leave
	ret
Lcont_56:
	MAKE_CLOSURE(rax , rdx , Lcode_56)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, const_tbl + 1	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 3 ;;; args count applic

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 8
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



	leave
	ret
Lcont_57:
	MAKE_CLOSURE(rax , rdx , Lcode_57)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_58:
	MAKE_CLOSURE(rax , rdx , Lcode_58)
	leave
	ret
Lcont_59:
	MAKE_CLOSURE(rax , rdx , Lcode_59)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 352], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 344] ;;; fvar list->vector
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_61
Lcode_61:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_60
Lcode_60:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_60:
	MAKE_CLOSURE(rax , rdx , Lcode_60)
	leave
	ret
Lcont_61:
	MAKE_CLOSURE(rax , rdx , Lcode_61)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 360], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 264] ;;; fvar apply
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 176] ;;; fvar +
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 5 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_65
Lcode_65:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *5)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_64
Lcode_64:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_63
Lcode_63:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_62
	mov rax, const_tbl + 32	;;;Const by genrate	
jmp Lexit_62

Lelse_62:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_62:
	leave
	ret
Lcont_63:
	MAKE_CLOSURE(rax , rdx , Lcode_63)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]


	leave
	ret
Lcont_64:
	MAKE_CLOSURE(rax , rdx , Lcode_64)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_65:
	MAKE_CLOSURE(rax , rdx , Lcode_65)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 176], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 264] ;;; fvar apply
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 184] ;;; fvar *
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 5 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_69
Lcode_69:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *5)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_68
Lcode_68:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_67
Lcode_67:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_66
	mov rax, const_tbl + 41	;;;Const by genrate	
jmp Lexit_66

Lelse_66:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_66:
	leave
	ret
Lcont_67:
	MAKE_CLOSURE(rax , rdx , Lcode_67)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]


	leave
	ret
Lcont_68:
	MAKE_CLOSURE(rax , rdx , Lcode_68)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_69:
	MAKE_CLOSURE(rax , rdx , Lcode_69)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 184], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 312] ;;; fvar length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 264] ;;; fvar apply
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 176] ;;; fvar +
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 192] ;;; fvar -
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 7 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_76
Lcode_76:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *7)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov rcx, qword [rbp + (8 * (4 + 5))]
	mov qword [rbx + 40], rcx

	mov rcx, qword [rbp + (8 * (4 + 6))]
	mov qword [rbx + 48], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_75
Lcode_75:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_71
Lcode_71:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_70
	mov rax, const_tbl + 32	;;;Const by genrate	
jmp Lexit_70

Lelse_70:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*6]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_70:
	leave
	ret
Lcont_71:
	MAKE_CLOSURE(rax , rdx , Lcode_71)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_74
Lcode_74:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_73
	mov rax, const_tbl + 50	;;;Const by genrate	
jmp Lexit_73

Lelse_73:
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*5]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_72
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_72

Lelse_72:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*6]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_72:


Lexit_73:
	leave
	ret
Lcont_74:
	MAKE_CLOSURE(rax , rdx , Lcode_74)


	leave
	ret
Lcont_75:
	MAKE_CLOSURE(rax , rdx , Lcode_75)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_76:
	MAKE_CLOSURE(rax , rdx , Lcode_76)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 192], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 312] ;;; fvar length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 264] ;;; fvar apply
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 184] ;;; fvar *
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 200] ;;; fvar /
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 7 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_80
Lcode_80:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *7)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov rcx, qword [rbp + (8 * (4 + 5))]
	mov qword [rbx + 40], rcx

	mov rcx, qword [rbp + (8 * (4 + 6))]
	mov qword [rbx + 48], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_79
Lcode_79:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_78
	mov rax, const_tbl + 50	;;;Const by genrate	
jmp Lexit_78

Lelse_78:
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*5]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_77
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_77

Lelse_77:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*6]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*2]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_77:


Lexit_78:
	leave
	ret
Lcont_79:
	MAKE_CLOSURE(rax , rdx , Lcode_79)
	leave
	ret
Lcont_80:
	MAKE_CLOSURE(rax , rdx , Lcode_80)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 200], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_87
Lcode_87:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *4)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_86
Lcode_86:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_83
Lcode_83:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_82
	mov rax, const_tbl + 4	;;;Const by genrate	
jmp Lexit_82

Lelse_82:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_81
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_81

Lelse_81:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_81:


Lexit_82:
	leave
	ret
Lcont_83:
	MAKE_CLOSURE(rax , rdx , Lcode_83)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_85
Lcode_85:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_84
	mov rax, const_tbl + 50	;;;Const by genrate	
jmp Lexit_84

Lelse_84:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_84:
	leave
	ret
Lcont_85:
	MAKE_CLOSURE(rax , rdx , Lcode_85)


	leave
	ret
Lcont_86:
	MAKE_CLOSURE(rax , rdx , Lcode_86)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_87:
	MAKE_CLOSURE(rax , rdx , Lcode_87)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 216], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 208] ;;; fvar <
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_94
Lcode_94:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *4)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_93
Lcode_93:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_90
Lcode_90:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_89
	mov rax, const_tbl + 4	;;;Const by genrate	
jmp Lexit_89

Lelse_89:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_88
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_88

Lelse_88:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_88:


Lexit_89:
	leave
	ret
Lcont_90:
	MAKE_CLOSURE(rax , rdx , Lcode_90)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_92
Lcode_92:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_91
	mov rax, const_tbl + 50	;;;Const by genrate	
jmp Lexit_91

Lelse_91:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_91:
	leave
	ret
Lcont_92:
	MAKE_CLOSURE(rax , rdx , Lcode_92)


	leave
	ret
Lcont_93:
	MAKE_CLOSURE(rax , rdx , Lcode_93)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_94:
	MAKE_CLOSURE(rax , rdx , Lcode_94)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 208], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 320] ;;; fvar not
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 208] ;;; fvar <
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 32] ;;; fvar null?
	push rax ;;; push arg applic
	push 6 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_102
Lcode_102:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *6)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov rcx, qword [rbp + (8 * (4 + 5))]
	mov qword [rbx + 40], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_101
Lcode_101:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_98
Lcode_98:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_97
	mov rax, const_tbl + 4	;;;Const by genrate	
jmp Lexit_97

Lelse_97:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_95

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


Lexit_95:
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_96
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*5]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_96

Lelse_96:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_96:


Lexit_97:
	leave
	ret
Lcont_98:
	MAKE_CLOSURE(rax , rdx , Lcode_98)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_100
Lcode_100:
	mov rbx, qword [rsp + 2 * WORD_SIZE]
	sub rbx, 0
	mov rcx, SOB_NIL_ADDRESS
.loop:
	cmp rbx, 0
	jle .after_adjust

	add rsp, (0 + 2) * WORD_SIZE
	mov rax, rbx
	mov rdx, WORD_SIZE
	mul rdx
	add rsp, rax
	mov rdx, qword [rsp]
	sub rsp, rax
	sub rsp, (0 + 2) * WORD_SIZE
	mov rsi, rcx
	MAKE_PAIR(rcx, rdx, rsi)
	sub rbx, 1
	jmp .loop

.after_adjust:
	mov qword [rsp + (3 + 0) * WORD_SIZE], rcx
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_99
	mov rax, const_tbl + 50	;;;Const by genrate	
jmp Lexit_99

Lelse_99:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*5]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_99:
	leave
	ret
Lcont_100:
	MAKE_CLOSURE(rax , rdx , Lcode_100)


	leave
	ret
Lcont_101:
	MAKE_CLOSURE(rax , rdx , Lcode_101)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_102:
	MAKE_CLOSURE(rax , rdx , Lcode_102)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 368], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	push SOB_NIL_ADDRESS
	mov rax, qword [fvar_tbl + 192] ;;; fvar -
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 152] ;;; fvar char->integer
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 232] ;;; fvar cdr
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 224] ;;; fvar car
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 168] ;;; fvar eq?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 48] ;;; fvar vector?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 56] ;;; fvar string?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 40] ;;; fvar char?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 24] ;;; fvar pair?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 8] ;;; fvar float?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 16] ;;; fvar integer?
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 112] ;;; fvar vector-length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 120] ;;; fvar vector-ref
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 88] ;;; fvar string-ref
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 80] ;;; fvar string-length
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 320] ;;; fvar not
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 216] ;;; fvar =
	push rax ;;; push arg applic

	mov rax, qword [fvar_tbl + 208] ;;; fvar <
	push rax ;;; push arg applic
	push 18 ;;; args count applic
	mov rdx, qword SOB_NIL_ADDRESS
	jmp Lcont_125
Lcode_125:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *18)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov rcx, qword [rbp + (8 * (4 + 5))]
	mov qword [rbx + 40], rcx

	mov rcx, qword [rbp + (8 * (4 + 6))]
	mov qword [rbx + 48], rcx

	mov rcx, qword [rbp + (8 * (4 + 7))]
	mov qword [rbx + 56], rcx

	mov rcx, qword [rbp + (8 * (4 + 8))]
	mov qword [rbx + 64], rcx

	mov rcx, qword [rbp + (8 * (4 + 9))]
	mov qword [rbx + 72], rcx

	mov rcx, qword [rbp + (8 * (4 + 10))]
	mov qword [rbx + 80], rcx

	mov rcx, qword [rbp + (8 * (4 + 11))]
	mov qword [rbx + 88], rcx

	mov rcx, qword [rbp + (8 * (4 + 12))]
	mov qword [rbx + 96], rcx

	mov rcx, qword [rbp + (8 * (4 + 13))]
	mov qword [rbx + 104], rcx

	mov rcx, qword [rbp + (8 * (4 + 14))]
	mov qword [rbx + 112], rcx

	mov rcx, qword [rbp + (8 * (4 + 15))]
	mov qword [rbx + 120], rcx

	mov rcx, qword [rbp + (8 * (4 + 16))]
	mov qword [rbx + 128], rcx

	mov rcx, qword [rbp + (8 * (4 + 17))]
	mov qword [rbx + 136], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_108
Lcode_108:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 23	;;;Const by genrate
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *4)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_107
Lcode_107:
	push rbp
	mov rbp, rsp

	MALLOC rax, WORD_SIZE
	mov rbx, PVAR(0)
	mov qword [rax], rbx

	mov qword [rbp + 8 * (4 +0)], rax
	mov rax, SOB_VOID_ADDRESS

	MALLOC rax, (8 * 3)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	mov rcx, qword [rbx + (8 * 1)]
	mov qword [rax + (8 * 2)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_105
Lcode_105:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 32	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +3)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_104
	mov rax, const_tbl + 4	;;;Const by genrate	
jmp Lexit_104

Lelse_104:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +3)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*(4 +2)]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +3)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*(4 +2)]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 376] ;;; fvar equal?
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_103
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +3)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*2]
	mov rax, qword [rax + 8*17]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +2)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 4 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 9
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	
jmp Lexit_103

Lelse_103:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_103:


Lexit_104:
	leave
	ret
Lcont_105:
	MAKE_CLOSURE(rax , rdx , Lcode_105)
	push rax
	mov rax, qword [rbp + 8*(4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS

	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*2]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_106
	mov rax, const_tbl + 2	;;;Const by genrate	
jmp Lexit_106

Lelse_106:
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, const_tbl + 41	;;;Const by genrate
	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*3]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*17]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*2]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*1]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	push rax ;;; push arg applic
	push 4 ;;; args count applic

	mov rax, qword [rbp + 8*(4 +0)]
	mov rax, qword [rax]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 9
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax



Lexit_106:


	leave
	ret
Lcont_107:
	MAKE_CLOSURE(rax , rdx , Lcode_107)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_108:
	MAKE_CLOSURE(rax , rdx , Lcode_108)
	push rax ;;; push arg applic
	push 1 ;;; args count applic

	MALLOC rax, (8 * 1)
	mov rbx, qword [rbp + (8 * 2)]
	MALLOC rbx, (8 *18)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov rcx, qword [rbp + (8 * (4 + 1))]
	mov qword [rbx + 8], rcx

	mov rcx, qword [rbp + (8 * (4 + 2))]
	mov qword [rbx + 16], rcx

	mov rcx, qword [rbp + (8 * (4 + 3))]
	mov qword [rbx + 24], rcx

	mov rcx, qword [rbp + (8 * (4 + 4))]
	mov qword [rbx + 32], rcx

	mov rcx, qword [rbp + (8 * (4 + 5))]
	mov qword [rbx + 40], rcx

	mov rcx, qword [rbp + (8 * (4 + 6))]
	mov qword [rbx + 48], rcx

	mov rcx, qword [rbp + (8 * (4 + 7))]
	mov qword [rbx + 56], rcx

	mov rcx, qword [rbp + (8 * (4 + 8))]
	mov qword [rbx + 64], rcx

	mov rcx, qword [rbp + (8 * (4 + 9))]
	mov qword [rbx + 72], rcx

	mov rcx, qword [rbp + (8 * (4 + 10))]
	mov qword [rbx + 80], rcx

	mov rcx, qword [rbp + (8 * (4 + 11))]
	mov qword [rbx + 88], rcx

	mov rcx, qword [rbp + (8 * (4 + 12))]
	mov qword [rbx + 96], rcx

	mov rcx, qword [rbp + (8 * (4 + 13))]
	mov qword [rbx + 104], rcx

	mov rcx, qword [rbp + (8 * (4 + 14))]
	mov qword [rbx + 112], rcx

	mov rcx, qword [rbp + (8 * (4 + 15))]
	mov qword [rbx + 120], rcx

	mov rcx, qword [rbp + (8 * (4 + 16))]
	mov qword [rbx + 128], rcx

	mov rcx, qword [rbp + (8 * (4 + 17))]
	mov qword [rbx + 136], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_124
Lcode_124:
	push rbp
	mov rbp, rsp

	MALLOC rax, (8 * 2)
	mov rbx, qword [rbp + (8 * 2)]
	mov rcx, qword [rbx + (8 * 0)]
	mov qword [rax + (8 * 1)], rcx

	MALLOC rbx, (8 *1)

	mov rcx, qword [rbp + (8 * (4 + 0))]
	mov qword [rbx + 0], rcx

	mov qword [rax] , rbx
	mov rdx, rax
	jmp Lcont_123
Lcode_123:
	push rbp
	mov rbp, rsp

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*7]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_110
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*7]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_109
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	
jmp Lexit_109

Lelse_109:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_109:
	
jmp Lexit_110

Lelse_110:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_110:

	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_122

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*8]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_112
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*8]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_111
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	
jmp Lexit_111

Lelse_111:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_111:
	
jmp Lexit_112

Lelse_112:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_112:

	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_122

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*9]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_115
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*9]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_114
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*14]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*14]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 376] ;;; fvar equal?
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_113
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*15]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*15]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [fvar_tbl + 376] ;;; fvar equal?
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	
jmp Lexit_113

Lelse_113:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_113:
	
jmp Lexit_114

Lelse_114:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_114:
	
jmp Lexit_115

Lelse_115:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_115:

	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_122

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*10]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_117
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*10]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_116
	push SOB_NIL_ADDRESS
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*16]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*16]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	push rax ;;; push arg applic
	push 2 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*1]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	
jmp Lexit_116

Lelse_116:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_116:
	
jmp Lexit_117

Lelse_117:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_117:

	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_122

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*11]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_119
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*11]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_118
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*3]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*4]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	
jmp Lexit_118

Lelse_118:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_118:
	
jmp Lexit_119

Lelse_119:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_119:

	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_122

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*12]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_121
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic
	push 1 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*12]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx


	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_120
	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*6]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*5]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 4 ;;; args count applic
	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*0]
	mov rax, qword [rax + 8*0]
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	
jmp Lexit_120

Lelse_120:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_120:
	
jmp Lexit_121

Lelse_121:
	mov rax, const_tbl + 2	;;;Const by genrate

Lexit_121:

	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit_122

	push SOB_NIL_ADDRESS
	mov rax, qword [rbp + 8*(4 +1)]
	push rax ;;; push arg applic

	mov rax, qword [rbp + 8*(4 +0)]
	push rax ;;; push arg applic
	push 2 ;;; args count applic

	mov rax, qword [rbp + 8*2]
	mov rax, qword [rax + 8*1]
	mov rax, qword [rax + 8*13]
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 7
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax


Lexit_122:
	leave
	ret
Lcont_123:
	MAKE_CLOSURE(rax , rdx , Lcode_123)
	leave
	ret
Lcont_124:
	MAKE_CLOSURE(rax , rdx , Lcode_124)
	CLOSURE_ENV rbx, rax
	push rbx

	push qword [rbp + 1 * WORD_SIZE] ;;; old rbp ApplicTP'
	push qword [rbp]
	SHIFT_FRAME 6
	pop rbp
	CLOSURE_CODE rax, rax
	jmp rax

	leave
	ret
Lcont_125:
	MAKE_CLOSURE(rax , rdx , Lcode_125)
	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, WORD_SIZE
	pop rbx
	add rbx, 1
	shl rbx, 3
	add rsp, rbx

	mov qword [fvar_tbl + 376], rax
	mov rax, SOB_VOID_ADDRESS
	call write_sob_if_not_void	;;;Print Sub Routine


	mov rax, const_tbl + 4	;;;Const by genrate
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse_126
	mov rax, const_tbl + 41	;;;Const by genrate	
jmp Lexit_126

Lelse_126:
	mov rax, const_tbl + 118	;;;Const by genrate

Lexit_126:
	call write_sob_if_not_void	;;;Print Sub Routine

	;;;prims.s
is_boolean:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_BOOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_float:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_FLOAT
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_integer:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_INTEGER
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_pair:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_PAIR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_null:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_NIL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_char:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CHAR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_vector:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_VECTOR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_string:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_STRING
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_procedure:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CLOSURE
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_symbol:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_SYMBOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

string_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    STRING_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

string_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov sil, byte [rsi]
    MAKE_CHAR(rax, sil)

    leave
    ret

string_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov rax, PVAR(2)
    CHAR_VAL al, rax
    mov byte [rsi], al
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    CHAR_VAL dil, rdi
    and rdi, 255

    MAKE_STRING rax, rsi, dil

    leave
    ret

vector_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    VECTOR_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

vector_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rax, [rsi]

    leave
    ret

vector_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rdi, PVAR(2)
    mov [rsi], rdi
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_vector:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    

    MAKE_VECTOR rax, rsi, rdi

    leave
    ret

symbol_to_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    SYMBOL_VAL rsi, rsi
    
    STRING_LENGTH rcx, rsi
    STRING_ELEMENTS rdi, rsi

    push rcx
    push rdi

    mov dil, byte [rdi]
    MAKE_CHAR(rax, dil)
    push rax
    MAKE_INT(rax, rcx)
    push rax
    push 2
    push SOB_NIL_ADDRESS
    call make_string
    add rsp, 4*8

    STRING_ELEMENTS rsi, rax

    pop rdi
    pop rcx

.loop:
    cmp rcx, 0
    je .end
    lea r8, [rdi+rcx]
    lea r9, [rsi+rcx]

    mov bl, byte [r8]
    mov byte [r9], bl
    
    dec rcx
.end:

    leave
    ret

char_to_integer:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    CHAR_VAL sil, rsi
    and rsi, 255
    MAKE_INT(rax, rsi)

    leave
    ret

integer_to_char:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    and rsi, 255
    MAKE_CHAR(rax, sil)

    leave
    ret

is_eq:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp rsi, rdi
    je .true
    mov rax, SOB_FALSE_ADDRESS
    jmp .return

.true:
    mov rax, SOB_TRUE_ADDRESS

.return:
    leave
    ret

bin_add:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    addsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_mul:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    mulsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_sub:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    subsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_div:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    divsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_lt:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpltsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

bin_equ:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpeqsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

car:
    push rbp
    mov rbp, rsp

    mov rax, PVAR(0) ;;; SOB list.
    CAR rax, rax     ;;; Car of the list now in rax

    leave
    ret

cdr:
    push rbp
    mov rbp, rsp

    mov rax, PVAR(0)
    CDR rax, rax

    leave
    ret

cons:
    push rbp
    mov rbp, rsp

    mov rcx, PVAR(0)
    mov rbx, PVAR(1)
    MAKE_PAIR(rax, rcx, rbx)

    leave
    ret

set_car:
    push rbp
    mov rbp, rsp

    mov rbx, PVAR(0)  ;; SOB Pair.
    mov rcx, PVAR(1)  ;; New value for pair
    mov qword [rbx + TYPE_SIZE], rcx
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

set_cdr:
    push rbp
    mov rbp,rsp

    mov rbx, PVAR(0)
    mov rcx, PVAR(1)
    mov qword [rbx + TYPE_SIZE + WORD_SIZE], rcx
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

apply:
    push rbp
    mov r9, rbp
	mov rbp, rsp

    push SOB_NIL_ADDRESS
    mov rsi, [rbp + 3 * WORD_SIZE]              ;; Num Params
    mov rbx, [rbp + (rsi + 3) * WORD_SIZE]
    mov rcx, 0                                  ;; Counter of params

    cmp byte [rbx], T_PAIR
    je .list_length
    cmp byte [rbx], T_NIL
    je .continue
    jmp .wrong_type

.list_length:
    mov rdx, rbx
    mov rdi, 0

.length_loop:
    inc rdi
    CDR rdx, rdx
    cmp byte [rdx], T_NIL
    je .length_continue
    cmp byte [rdx], T_PAIR
    je .length_loop
    jmp .wrong_type

.length_continue:
    shl rdi, 3
    sub rsp, rdi

.list_loop:
    CAR rax, rbx
    mov qword [rsp], rax
    add rsp, WORD_SIZE
    add rcx, 1
    CDR rbx, rbx
    cmp byte [rbx], T_NIL
    je .list_loop_continue
    jmp .list_loop

.list_loop_continue:
    sub rsp, rdi

.continue:
    sub rsi, 2
    add rcx, rsi

.loop:
    cmp rsi, 0
    je .continue_loop
    mov rax, [rbp + (WORD_SIZE * (4 +rsi))]
    push rax
    dec rsi
    jmp .loop

.continue_loop:
    push rcx
    add rcx, 5
    mov rax, [rbp + 4 * WORD_SIZE] ;;; Proc!
    CLOSURE_ENV rbx, rax
    push rbx
    push qword [rbp + WORD_SIZE]
    CLOSURE_CODE rax, rax
.shift:
    SHIFT_FRAME2 rcx
.after_shift:
    mov rbp, r9
    jmp rax
    ; add rsp, WORD_SIZE
	; pop rbx
	; add rbx, 1
	; shl rbx, 3
	; add rsp, rbx

.ret:
    leave
    ret

.wrong_type:
    mov rax, SOB_VOID_ADDRESS
    jmp .ret
